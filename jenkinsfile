node('skopeo') {

    def appName="petclinic"
    def projectName="spring"
    def repoUrl="github.com/carmensyva/spring-petclinic.git"
    def branchName="main"
    def deploymentYamlPath = "values/deployment.yaml"

    def intRegistryDev="default-route-openshift-image-registry.apps.dev.mibocp.co.id"
    def ocpDRCDev="https://api.dev.mibocp.co.id:6443"
    def hostedRepoUrl = "http://nexus-service.nexus.svc.cluster.local:8081/repository/mib-maven-hosted/"

    stage ('Git Clone') {
        sh "git config --global http.sslVerify false"
        withCredentials([usernamePassword(credentialsId: 'cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh "git clone https://\${USERNAME}:\${PASSWORD}@${repoUrl} source "
        }
    }

    stage ('SonarQube Analysis') {
        dir("source") {
            sh "git fetch"
            sh "git switch ${branchName}" 
            withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                sh "mvn clean verify sonar:sonar -s settings-sonar.xml -Dsonar.login=${SONAR_TOKEN} -Dcheckstyle.skip"
            }
        }
    }

    stage ('App Build') {
        dir("source") {
            sh "git fetch"
            sh "git switch ${branchName}" 
            withCredentials([usernamePassword(credentialsId: 'nexusid', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                sh "mvn clean deploy -Dmaven.test.skip=true -s settings-nexus.xml -DaltDeploymentRepository=nexus::default::${hostedRepoUrl} -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true"
            }
        }
    }

    stage('App Push') {
        dir("source") {
            // Prepare build directory and copy necessary files
            sh "mkdir -p build-folder/target/ build-folder/apps/"
            sh "cp dockerfile build-folder/Dockerfile"
            sh "cp target/*.jar build-folder/target/"

            // Get the current git commit hash
            def tag = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
            def tokenLocal = sh(script: 'oc whoami -t', returnStdout: true).trim()

            // Create new build or update existing build configuration
            sh "cat build-folder/Dockerfile | oc new-build -D - --name ${appName} || true"

            // Start the build and tag the image
            sh "oc start-build ${appName} --from-dir=build-folder/. --follow --wait"

            // Check if the OpenShift project exists, and create it if it does not
            // def projectExists = sh(script: "oc get project ${projectName} --no-headers -o custom-columns=NAME:.metadata.name || echo not_found", returnStdout: true).trim()
            // if (projectExists == "not_found") {
            //     echo "Project ${projectName} not found. Creating project..."
            //     sh "oc new-project ${projectName}"
            // } else {
            //     echo "Project ${projectName} already exists."
            // }

            sh "oc tag cicd/${appName}:latest ${projectName}/${appName}:${tag}"
        }
    }

    stage('Update Deployment YAML') {
        dir("source") {
            tag = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
            // Update the deployment YAML file with the new image tag
            sh "sed -i 's|image:.*|image: ${intRegistryDev}/${projectName}/${appName}:${tag}|g' ${deploymentYamlPath}"
        }
    }

    stage('Commit and Push Changes') {
        dir("source") {
            withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                sh "git config user.email 'gading.iantrisna1@gmail.com'"
                sh "git config user.name 'carmensyva'"
                sh "git add ${deploymentYamlPath}"
                sh "git commit -m 'Update deployment YAML with new image tag ${tag}'"
                sh "git push https://${GITHUB_TOKEN}@${repoUrl} ${branchName}"
            }
        }
    }
}
